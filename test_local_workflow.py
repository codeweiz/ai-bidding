#!/usr/bin/env python3
"""
本地工作流测试脚本
使用本地数据模拟完整的投标书生成流程
"""
import asyncio
from pathlib import Path
from datetime import datetime

async def test_local_workflow():
    """测试本地工作流程"""
    print("🚀 开始测试本地AI投标工作流程")
    print("=" * 60)
    
    try:
        # 1. 导入必要的模块
        from backend.services.enhanced_document_parser import enhanced_document_parser
        from backend.services.enhanced_output_parser import enhanced_output_parser, DocumentSection
        from backend.models.generation import WorkflowState
        
        print("✅ 模块导入成功")
        
        # 2. 解析招标文档
        print("\n📄 步骤1: 解析招标文档")
        tender_doc_path = Path("temp_docs/招标书001.docx")
        
        if not tender_doc_path.exists():
            print(f"❌ 招标文档不存在: {tender_doc_path}")
            return None
        
        # 使用增强的文档解析器
        parsed_result = enhanced_document_parser.parse_tender_document(tender_doc_path)
        
        print(f"✅ 文档解析完成:")
        print(f"   - 文件名: {parsed_result['file_name']}")
        print(f"   - 总页数: {parsed_result['metadata']['total_pages']}")
        print(f"   - 强制性条款: {parsed_result['metadata']['mandatory_clauses_count']} 个")
        print(f"   - 重要参数: {parsed_result['metadata']['important_clauses_count']} 个")
        
        # 3. 创建模拟的需求分析结果
        print("\n🔍 步骤2: 模拟需求分析")
        
        project_info = parsed_result['structured_data']['project_info']
        mandatory_clauses = parsed_result['structured_data']['mandatory_clauses']
        important_clauses = parsed_result['structured_data']['important_clauses']
        
        # 构建模拟的需求分析结果
        mock_analysis = f"""
## 项目基本信息
- 项目名称：{project_info.name}
- 预算：{project_info.budget}
- 招标人：{project_info.client}

## 强制性要求（★条款）
{chr(10).join([f"- {clause.content[:100]}..." for clause in mandatory_clauses[:5]])}

## 重要技术参数（▲条款）
{chr(10).join([f"- {clause.content[:100]}..." for clause in important_clauses[:5]])}

## 核心技术需求
1. EPG改版需求：功能页、列表页、详情页、专区页模块改版
2. 可视化扩容需求：支持EPG改版的可视化模板制作、组件编排、审核发布
3. 系统安全要求：等保三级、HTTPS升级、安全防护
4. 性能指标：支持1500万用户、800万并发、≤200ms响应时间
5. 交付要求：提供EPG源代码及打包工具

## 评分标准分析
- 技术评分：40分（用户需求响应、技术方案、售后服务、人员资质、本地化服务）
- 商务评分：30分（企业资质、自主产权、人员配置、项目经验、财务状况）
- 价格评分：30分（基准价评分法）
        """
        
        print("✅ 需求分析完成（模拟数据）")
        
        # 4. 生成投标方案章节
        print("\n📝 步骤3: 生成投标方案章节")
        
        sections = [
            DocumentSection(
                title="项目概述",
                level=1,
                content=f"""
## 1.1 项目背景与理解

{project_info.name}是广东南方新媒体股份有限公司的重要技术升级项目，旨在提升IPTV平台的用户体验和系统性能。本项目涉及EPG前端改版、可视化编辑工具扩容以及系统安全升级等多个方面。

我方深度理解项目的核心价值：
- 提升用户界面体验，增强用户粘性
- 扩展内容管理能力，提高运营效率
- 保障系统安全稳定，满足合规要求
- 支持大规模用户访问，确保服务质量

## 1.2 建设目标与意义

本项目的建设目标包括：
1. **用户体验提升**：通过EPG改版，提供更加友好和直观的用户界面
2. **运营效率优化**：通过可视化编辑工具，简化内容制作和发布流程
3. **系统安全加固**：通过安全升级，确保系统符合等保三级要求
4. **性能容量扩展**：支持更大规模的用户并发访问

## 1.3 招标内容理解与范围确认

根据招标文件，本项目的核心内容包括：
- EPG前端页面改版（功能页、列表页、详情页、专区页）
- 可视化编辑工具功能扩容
- 系统安全升级（等保三级、HTTPS）
- 性能优化（支持1500万用户、800万并发）
- 源代码交付及打包工具提供

## 1.4 投标响应承诺

我方郑重承诺：
- 严格按照招标文件要求进行技术方案设计
- 确保所有强制性条款得到完全满足
- 在规定时间内完成项目交付
- 提供完整的技术文档和源代码
- 提供优质的售后服务和技术支持
                """,
                section_type="normal"
            ),
            DocumentSection(
                title="总体设计思路与技术架构",
                level=1,
                content="""
## 2.1 设计原则与理念

基于"安全、稳定、高效、可扩展"的设计理念，我们采用以下设计原则：

### 2.1.1 安全性原则
- 采用多层次安全防护体系
- 实施数据加密和访问控制
- 建立完善的安全审计机制
- 符合等保三级安全要求

### 2.1.2 稳定性原则
- 采用成熟可靠的技术架构
- 实施容错和故障恢复机制
- 建立完善的监控和告警体系
- 确保系统7×24小时稳定运行

### 2.1.3 高效性原则
- 优化系统性能和响应速度
- 采用缓存和负载均衡技术
- 实施数据库优化和索引策略
- 确保接口响应时间≤200ms

### 2.1.4 可扩展性原则
- 采用微服务架构设计
- 支持水平扩展和弹性伸缩
- 预留接口和扩展点
- 支持未来功能升级

## 2.2 总体系统架构设计

### 2.2.1 架构概述
采用分层式微服务架构，包括：
- **前端展示层**：基于Vue.js 3.0的响应式用户界面
- **API网关层**：统一的接口管理和安全控制
- **业务服务层**：微服务化的业务逻辑处理
- **数据服务层**：数据存储和缓存服务
- **基础设施层**：容器化部署和运维监控

### 2.2.2 核心组件
1. **EPG前端系统**：负责用户界面展示和交互
2. **可视化编辑器**：提供拖拽式内容编辑功能
3. **内容管理系统**：管理EPG内容和模板
4. **用户管理系统**：处理用户认证和权限控制
5. **监控运维系统**：提供系统监控和运维支持

## 2.3 技术路线选型

### 2.3.1 前端技术栈
- **框架**：Vue.js 3.0 + TypeScript
- **UI组件**：Element Plus + 自定义组件
- **状态管理**：Pinia
- **构建工具**：Vite
- **移动端适配**：响应式设计 + PWA

### 2.3.2 后端技术栈
- **框架**：Spring Boot 2.7 + Spring Cloud
- **数据库**：MySQL 8.0（主库）+ Redis 6.0（缓存）
- **消息队列**：RabbitMQ
- **搜索引擎**：Elasticsearch
- **文件存储**：MinIO

### 2.3.3 基础设施
- **容器化**：Docker + Kubernetes
- **CI/CD**：Jenkins + GitLab
- **监控**：Prometheus + Grafana + ELK
- **安全**：OAuth2 + JWT + HTTPS

## 2.4 关键技术方案

### 2.4.1 高并发处理方案
- 采用分布式缓存Redis集群
- 实施数据库读写分离和分库分表
- 使用CDN加速静态资源访问
- 部署负载均衡和反向代理

### 2.4.2 可视化编辑技术
- 基于Canvas的拖拽编辑器
- 组件化的模板设计
- 实时预览和所见即所得
- 支持多种媒体格式

### 2.4.3 安全防护技术
- 实施WAF防护和DDoS防护
- 采用数据加密和传输加密
- 建立访问控制和权限管理
- 实施安全审计和日志记录
                """,
                section_type="technical"
            ),
            DocumentSection(
                title="EPG前端改版设计",
                level=1,
                content="""
## 3.1 改版目标与原则

### 3.1.1 改版目标
- 提升用户体验，简化操作流程
- 优化界面设计，增强视觉效果
- 增强交互性能，提高响应速度
- 适配多终端，支持移动设备

### 3.1.2 设计原则
- **用户中心**：以用户需求为导向
- **简洁高效**：界面简洁，操作高效
- **一致性**：保持设计风格统一
- **可访问性**：支持无障碍访问

## 3.2 功能页改版设计

### 3.2.1 首页优化
- 重新设计导航结构，提高内容发现性
- 优化推荐算法，提供个性化内容
- 增强搜索功能，支持智能搜索
- 改进加载性能，减少首屏时间

### 3.2.2 分类页面
- 优化分类导航，支持多级分类
- 改进筛选功能，提供多维度筛选
- 增强排序功能，支持多种排序方式
- 优化分页加载，支持无限滚动

## 3.3 列表页改版设计

### 3.3.1 布局优化
- 采用响应式网格布局
- 支持列表和卡片两种显示模式
- 优化图片加载和懒加载
- 增强交互反馈和动画效果

### 3.3.2 功能增强
- 增加批量操作功能
- 支持拖拽排序
- 增强筛选和搜索
- 优化分页和加载

## 3.4 详情页改版设计

### 3.4.1 信息架构
- 重新组织信息层次
- 突出核心内容信息
- 优化相关推荐算法
- 增强社交分享功能

### 3.4.2 交互优化
- 改进播放器界面
- 增强评论和互动功能
- 优化收藏和历史记录
- 支持多种分享方式

## 3.5 专区页改版设计

### 3.5.1 专区架构
- 设计灵活的专区模板
- 支持自定义专区布局
- 增强专区内容管理
- 优化专区导航和搜索

### 3.5.2 内容展示
- 支持多种内容展示形式
- 增强专区推荐功能
- 优化专区内容加载
- 支持专区个性化定制
                """,
                section_type="technical"
            ),
            DocumentSection(
                title="可视化EPG系统功能优化设计",
                level=1,
                content="""
## 4.1 可视化编辑器架构

### 4.1.1 编辑器核心功能
- **拖拽式编辑**：支持组件拖拽和布局调整
- **实时预览**：所见即所得的编辑体验
- **组件库**：丰富的预制组件和模板
- **样式编辑**：可视化的样式配置工具

### 4.1.2 技术实现方案
- 基于Canvas和SVG的渲染引擎
- 组件化的架构设计
- 响应式的布局系统
- 高性能的渲染优化

## 4.2 模板制作系统

### 4.2.1 模板设计器
- 提供丰富的设计工具
- 支持多种布局模式
- 内置设计规范和约束
- 支持模板版本管理

### 4.2.2 组件管理
- 可扩展的组件体系
- 组件属性配置界面
- 组件样式定制功能
- 组件复用和共享机制

## 4.3 内容编排系统

### 4.3.1 内容管理
- 多媒体内容支持
- 内容版本控制
- 内容审核流程
- 内容发布管理

### 4.3.2 编排工具
- 时间轴编辑器
- 场景切换管理
- 动画效果配置
- 交互行为定义

## 4.4 审核发布系统

### 4.4.1 审核流程
- 多级审核机制
- 审核状态跟踪
- 审核意见反馈
- 审核历史记录

### 4.4.2 发布管理
- 定时发布功能
- 发布范围控制
- 发布状态监控
- 回滚和撤销机制

## 4.5 系统扩容设计

### 4.5.1 性能优化
- 编辑器性能优化
- 渲染引擎优化
- 内存管理优化
- 网络传输优化

### 4.5.2 扩展能力
- 插件化架构
- API接口扩展
- 第三方集成能力
- 自定义开发支持
                """,
                section_type="technical"
            ),
            DocumentSection(
                title="系统安全设计",
                level=1,
                content="""
## 5.1 安全体系架构

### 5.1.1 安全设计原则
- **纵深防御**：多层次安全防护
- **最小权限**：最小化权限分配
- **安全审计**：全面的安全日志
- **持续监控**：实时安全监控

### 5.1.2 安全架构层次
1. **网络安全层**：防火墙、IDS/IPS、DDoS防护
2. **应用安全层**：WAF、API安全、代码安全
3. **数据安全层**：数据加密、访问控制、备份恢复
4. **运维安全层**：安全运维、漏洞管理、应急响应

## 5.2 等保三级合规设计

### 5.2.1 技术要求
- **身份鉴别**：多因子认证、强密码策略
- **访问控制**：RBAC权限模型、最小权限原则
- **安全审计**：全面日志记录、审计分析
- **通信完整性**：数据传输加密、完整性校验
- **通信保密性**：端到端加密、密钥管理

### 5.2.2 管理要求
- **安全管理制度**：建立完善的安全管理制度
- **安全管理机构**：设立专门的安全管理机构
- **人员安全管理**：安全培训、权限管理
- **系统建设管理**：安全开发生命周期
- **系统运维管理**：安全运维流程

## 5.3 HTTPS升级方案

### 5.3.1 SSL/TLS配置
- 采用TLS 1.3协议
- 配置强加密套件
- 实施HSTS策略
- 部署证书透明度

### 5.3.2 证书管理
- 使用EV SSL证书
- 实施证书自动更新
- 建立证书监控机制
- 配置证书备份策略

## 5.4 数据安全保障

### 5.4.1 数据加密
- **传输加密**：HTTPS、TLS加密
- **存储加密**：数据库加密、文件加密
- **密钥管理**：密钥生成、分发、轮换
- **加密算法**：AES-256、RSA-2048

### 5.4.2 访问控制
- **身份认证**：多因子认证、SSO
- **权限管理**：RBAC、ABAC模型
- **会话管理**：会话超时、并发控制
- **API安全**：OAuth2、JWT令牌

## 5.5 安全监控与应急响应

### 5.5.1 安全监控
- **实时监控**：安全事件监控、异常检测
- **日志分析**：集中日志管理、智能分析
- **威胁情报**：威胁情报收集、分析应用
- **漏洞管理**：漏洞扫描、修复跟踪

### 5.5.2 应急响应
- **应急预案**：制定详细的应急预案
- **响应流程**：建立快速响应流程
- **事件处理**：安全事件分类处理
- **恢复机制**：业务快速恢复机制
                """,
                section_type="normal"
            ),
            DocumentSection(
                title="项目实施与管理",
                level=1,
                content="""
## 6.1 项目组织架构

### 6.1.1 项目团队组成
- **项目经理**：负责项目整体管理和协调
- **技术架构师**：负责技术方案设计和架构指导
- **前端开发团队**：负责EPG前端开发和优化
- **后端开发团队**：负责后台服务开发和集成
- **测试团队**：负责系统测试和质量保证
- **运维团队**：负责系统部署和运维支持

### 6.1.2 团队职责分工
- **需求分析**：业务分析师、产品经理
- **系统设计**：架构师、技术负责人
- **开发实施**：前端工程师、后端工程师
- **质量保证**：测试工程师、QA工程师
- **项目管理**：项目经理、PMO

## 6.2 实施计划与里程碑

### 6.2.1 项目总体计划
项目总工期：1个月（30个工作日）

**第一阶段：需求确认和设计（1周）**
- 第1-2天：需求调研和确认
- 第3-4天：系统架构设计
- 第5天：详细设计评审

**第二阶段：开发实施（2周）**
- 第6-10天：核心功能开发
- 第11-15天：功能集成和联调

**第三阶段：测试验收（1周）**
- 第16-20天：系统测试和优化
- 第21-25天：用户验收测试

**第四阶段：部署上线（1周）**
- 第26-28天：生产环境部署
- 第29-30天：系统验收和交付

### 6.2.2 关键里程碑
- **M1**：需求确认完成（第5天）
- **M2**：核心功能开发完成（第15天）
- **M3**：系统测试完成（第25天）
- **M4**：项目验收完成（第30天）

## 6.3 质量保障措施

### 6.3.1 开发质量控制
- **代码规范**：制定统一的代码规范和标准
- **代码审查**：实施严格的代码审查机制
- **单元测试**：要求单元测试覆盖率≥80%
- **集成测试**：建立自动化集成测试流程

### 6.3.2 测试质量保证
- **测试策略**：制定全面的测试策略
- **测试用例**：设计完整的测试用例
- **自动化测试**：建立自动化测试体系
- **性能测试**：进行全面的性能测试

## 6.4 风险管控方案

### 6.4.1 技术风险
- **风险识别**：技术难点、兼容性问题
- **应对措施**：技术预研、备选方案
- **监控机制**：技术评审、专家咨询
- **应急预案**：技术支持、外部协助

### 6.4.2 进度风险
- **风险识别**：资源不足、需求变更
- **应对措施**：资源预留、变更控制
- **监控机制**：进度跟踪、里程碑检查
- **应急预案**：资源调配、计划调整

### 6.4.3 质量风险
- **风险识别**：功能缺陷、性能问题
- **应对措施**：质量标准、测试充分
- **监控机制**：质量度量、缺陷跟踪
- **应急预案**：问题修复、质量改进
                """,
                section_type="normal"
            )
        ]
        
        print(f"✅ 投标方案章节生成完成:")
        print(f"   - 章节数量: {len(sections)} 个")
        for section in sections:
            print(f"   - {section.title} ({section.section_type})")
        
        # 5. 生成专业Word文档
        print("\n📄 步骤4: 生成专业Word文档")
        
        metadata = {
            "生成时间": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "项目类型": "IPTV可视化编辑工具项目",
            "文档类型": "投标技术方案书",
            "预算": project_info.budget or "51万元",
            "工期": "1个月",
            "强制性要求": f"{len(mandatory_clauses)}个",
            "重要参数": f"{len(important_clauses)}个"
        }
        
        project_name = "广东IPTV集成播控分平台首页可视化编辑工具三期项目投标方案"
        document_path = enhanced_output_parser.create_professional_word_document(
            sections, 
            project_name, 
            metadata
        )
        
        print(f"✅ 专业Word文档生成完成:")
        print(f"   - 文档路径: {document_path}")
        print(f"   - 文档大小: {document_path.stat().st_size / 1024:.1f} KB")
        
        # 6. 对比分析
        print("\n📊 步骤5: 与目标投标书对比分析")
        
        # 读取目标投标书进行对比
        target_doc_path = Path("temp_docs/投标书001.docx")
        if target_doc_path.exists():
            target_result = enhanced_document_parser.parse_tender_document(target_doc_path)
            target_content = target_result['full_content']
            
            print("✅ 目标投标书解析完成")
            print(f"   - 目标文档页数: {target_result['metadata']['total_pages']}")
            print(f"   - 目标文档长度: {len(target_content)} 字符")
            
            # 简单的内容对比分析
            generated_content_length = sum(len(section.content) for section in sections)
            print(f"   - 生成文档长度: {generated_content_length} 字符")
            print(f"   - 内容丰富度: {generated_content_length / len(target_content) * 100:.1f}%")
            
        else:
            print("⚠️ 目标投标书不存在，跳过对比分析")
        
        # 7. 总结
        print("\n🎉 本地工作流程测试完成")
        print("=" * 60)
        print("✅ 测试结果总结:")
        print(f"   - 招标文档解析: 成功")
        print(f"   - 需求分析模拟: 成功")
        print(f"   - 章节内容生成: 成功")
        print(f"   - Word文档输出: 成功")
        print(f"   - 对比分析: 完成")
        
        return document_path
        
    except Exception as e:
        print(f"❌ 测试过程中发生异常: {e}")
        import traceback
        traceback.print_exc()
        return None


if __name__ == "__main__":
    print("🎯 AI投标系统本地工作流程测试")
    print("本测试将使用本地数据模拟完整的投标方案生成")
    print("-" * 60)
    
    # 运行本地测试
    result_path = asyncio.run(test_local_workflow())
    
    if result_path:
        print(f"\n🎊 测试成功完成！生成的投标书: {result_path}")
    else:
        print("\n😞 测试未能完成")
