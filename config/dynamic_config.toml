# AI投标系统动态配置文件
# 使用TOML格式提供更好的可读性和维护性

[llm]
temperature = 0.2
#max_tokens = 65536 reasoner
max_tokens = 8192

[llm.retry_config]
max_retries = 3
retry_delay = 1.0
enable_format_validation = true

[prompts]
system_prompt_prefix = ""

iptv_expert_prompt = """
你是一位资深的广电IPTV领域技术专家，具有15年以上的行业经验和丰富的投标方案编写经验。

核心要求：
1. 严格基于招标文档要求，紧扣具体需求点，避免泛泛而谈
2. 使用行业专业术语，体现技术深度和专业水准
3. 避免涉及具体技术栈名称（如Vue、Spring等），采用通用技术描述
4. 避免输出售后、验收、质量保障等通用内容
5. 内容要有针对性，体现对招标需求的深度理解
6. 语言表达要简洁明了，逻辑清晰
7. 字数控制在1000-1800字

表达要求：
- 使用"基于先进的前端框架"而非"基于Vue3.0"
- 使用"采用微服务架构"而非"采用Spring Cloud"
- 使用"分布式缓存技术"而非"Redis集群"
- 重点描述技术方案的优势和创新点
- 确保内容专业、准确、有说服力
"""

outline_generation_prompt = """
请基于招标文档生成IPTV系统技术方案提纲。

要求：
1. 使用规范的数字编号格式（1. 1.1 1.1.1）
2. 层次清晰，逻辑合理，深度不超过4级
3. 全面覆盖招标文档中的技术需求点
4. 避免通用性章节，突出项目特色
5. 体现IPTV专业特色和技术创新
6. 章节标题简洁明了，避免冗长表述

输出格式示例：
1. 项目概述
1.1 项目背景
1.2 建设目标
1.3 建设依据
2. 需求理解与分析
2.1 功能需求分析
2.2 性能需求分析
2.3 安全需求分析
3. 技术方案设计
3.1 总体架构设计
3.2 核心功能实现
3.3 关键技术选型
"""

differentiation_prompt = """
请对以下技术方案内容进行差异化改写，确保内容质量和专业性：

要求：
1. 保持原意和技术准确性，不改变核心观点
2. 改变表述方式和句式结构，提升表达多样性
3. 使用同义词和近义词替换，避免重复表达
4. 重新组织段落结构，优化逻辑顺序
5. 差异化程度控制在30-40%
6. 保持专业性和可读性
7. 确保改写后内容更加简洁明了
"""

parent_summary_prompt = """
你是一位资深的技术方案编写专家，精通广电IPTV领域。请为父级章节生成高质量的总结性内容。

核心要求：
1. 基于子章节内容进行高度概括和总结
2. 体现章节间的逻辑关系和技术关联
3. 突出技术方案的重点和创新亮点
4. 确保内容承上启下，增强整体连贯性
5. 避免简单重复子章节内容
6. 语言简洁专业，逻辑清晰
7. 字数控制在500-800字

表达要求：
- 使用总结性语言，如"综上所述"、"通过以上分析"
- 突出技术方案的整体性和系统性
- 体现对招标需求的深度理解和响应
- 确保内容专业、准确、有说服力
"""

test_prompt = "这是一个测试Prompt"

[workflow]
enable_concurrent_generation = true
max_concurrent_tasks = 5
enable_vector_retrieval = true
chunk_size = 2000
enable_differentiation = true

[formatting]
auto_numbering = true
include_toc = true
page_break_after_toc = true
center_title = true
process_diagrams = true

[formatting.style_mapping]
"1" = "标书1级"
"2" = "标书2级"
"3" = "标书3级"
"4" = "标书4级"
"5" = "标书5级"
content = "标书正文"
title = "标书1级"

[providers]
default = "deepseek"

[providers.available.deepseek]
type = "deepseek"
model_name = "deepseek-chat"
api_key = ""
base_url = ""

[providers.available.openai]
type = "openai"
model_name = "gpt-3.5-turbo"
api_key = ""
base_url = ""

[providers.available.gemini]
type = "openai"
model_name = "gemini-pro-2.5"
api_key = ""
base_url = "https://api.monica.im/v1"

[test]
key = "test_value"
