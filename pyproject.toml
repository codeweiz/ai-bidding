[project]
name = "ai-bidding"
version = "0.1.0"
description = "基于AI的投标方案辅助生成系统"
requires-python = ">=3.11"
dependencies = [
    "bs4>=0.0.2",
    "chromadb>=1.0.12",
    "datasets>=3.6.0",
    "fastapi>=0.115.9",
    "langchain>=0.3.25",
    "langchain-community>=0.3.25",
    "langchain-core>=0.3.65",
    "langchain-deepseek>=0.1.3",
    "langchain-huggingface>=0.3.0",
    "langgraph>=0.4.8",
    "numpy>=1.24.0,<2.0.0",
    "pillow>=11.2.1",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.9.1",
    "pypdf>=5.6.0",
    "python-docx>=1.1.2",
    "python-multipart>=0.0.20",
    "scikit-learn>=1.7.0",
    "sentence-transformers>=4.1.0",
    "toml>=0.10.2",
    "tqdm>=4.67.1",
    "unstructured[all-docs]>=0.18.1",
    "uvicorn>=0.34.3",
    "gradio>=4.0.0",
    "celery[redis]>=5.3.0",
    "redis>=5.0.0",
    "loguru>=0.7.0",
    "aiofiles>=23.2.0",
    "httpx>=0.25.0",
    "langchain-unstructured>=0.1.6",
    # 新增依赖 - 数据库和持久化
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",  # PostgreSQL异步驱动
    "aiosqlite>=0.19.0",  # SQLite异步驱动
    # 新增依赖 - 任务调度和监控
    "flower>=2.0.0",  # Celery监控
    "kombu>=5.3.0",  # 消息传递
    # 新增依赖 - 输出处理和校验
    "jinja2>=3.1.0",  # 模板引擎
    "jsonschema>=4.20.0",  # JSON校验
    "pydantic-extra-types>=2.0.0",  # 额外类型支持
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.2",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.9.1",
    "isort>=5.12.0",
    "mypy>=1.5.1",
    "ruff>=0.1.0",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["backend*", "frontend*"]

[tool.setuptools.package-data]
"*" = ["*.toml", "*.yaml", "*.yml", "*.json"]

# ==================== 开发工具配置 ====================

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["backend", "frontend"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
