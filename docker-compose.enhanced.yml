version: '3.8'

services:
  # PostgreSQL数据库服务
  postgres:
    image: postgres:15-alpine
    container_name: ai-bidding-postgres
    environment:
      POSTGRES_DB: ai_bidding
      POSTGRES_USER: ai_bidding
      POSTGRES_PASSWORD: ai_bidding_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ai-bidding-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_bidding"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis服务
  redis:
    image: redis:7-alpine
    container_name: ai-bidding-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - ai-bidding-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端API服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-bidding-backend
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./outputs:/app/outputs
      - ./logs:/app/logs
      - ./config.toml:/app/config.toml:ro
    environment:
      - DATABASE_URL=postgresql+asyncpg://ai_bidding:ai_bidding_password@postgres:5432/ai_bidding
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-bidding-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker服务
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-bidding-celery-worker
    volumes:
      - ./uploads:/app/uploads
      - ./outputs:/app/outputs
      - ./logs:/app/logs
      - ./config.toml:/app/config.toml:ro
    environment:
      - DATABASE_URL=postgresql+asyncpg://ai_bidding:ai_bidding_password@postgres:5432/ai_bidding
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    command: celery -A backend.tasks.celery_app worker --loglevel=info --concurrency=2 --queues=default,workflow,workflow_high
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-bidding-network
    restart: unless-stopped

  # Celery Beat服务（定时任务）
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-bidding-celery-beat
    volumes:
      - ./uploads:/app/uploads
      - ./outputs:/app/outputs
      - ./logs:/app/logs
      - ./config.toml:/app/config.toml:ro
    environment:
      - DATABASE_URL=postgresql+asyncpg://ai_bidding:ai_bidding_password@postgres:5432/ai_bidding
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    command: celery -A backend.tasks.celery_app beat --loglevel=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-bidding-network
    restart: unless-stopped

  # Flower监控服务（Celery监控）
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-bidding-flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    command: celery -A backend.tasks.celery_app flower --port=5555
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai-bidding-network
    restart: unless-stopped

  # 前端服务
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-bidding-frontend
    ports:
      - "7860:7860"
    volumes:
      - ./uploads:/app/uploads
      - ./outputs:/app/outputs
      - ./config.toml:/app/config.toml:ro
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    command: python frontend/app.py
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ai-bidding-network
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: ai-bidding-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./uploads:/var/www/uploads:ro
      - ./outputs:/var/www/outputs:ro
    depends_on:
      - backend
      - frontend
      - flower
    networks:
      - ai-bidding-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  ai-bidding-network:
    driver: bridge
